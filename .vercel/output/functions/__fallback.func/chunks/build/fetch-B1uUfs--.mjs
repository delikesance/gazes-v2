import { computed, toValue, reactive } from 'vue';
import { a2 as hash } from '../nitro/nitro.mjs';
import { isPlainObject } from '@vue/shared';
import { r } from './ssr-DTPz_gAB.mjs';
import { f } from './asyncData-BOLdWyFS.mjs';
import { f as ge } from './server.mjs';

function u(s,u,f$1){const[l={},m]="string"==typeof u?[{},u]:[u,f$1],d=computed(()=>toValue(s)),p=computed(()=>toValue(l.key)||"$f"+hash([m,"string"==typeof d.value?d.value:"",...c(l)]));if(!l.baseURL&&"string"==typeof d.value&&"/"===d.value[0]&&"/"===d.value[1])throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:h,lazy:b,default:y,transform:v,pick:g,watch:w,immediate:U,getCachedData:E,deep:R,dedupe:j,...A}=l,C=reactive({...ge,...A,cache:"boolean"==typeof l.cache?void 0:l.cache}),D={server:h,lazy:b,default:y,transform:v,pick:g,immediate:U,getCachedData:E,deep:R,dedupe:j,watch:false===w?[]:[...w||[],C]};let q;return f(false===w?p.value:p,()=>{q?.abort?.(new DOMException("Request aborted as another request to the same endpoint was initiated.","AbortError")),q="undefined"!=typeof AbortController?new AbortController:{};const e=toValue(l.timeout);let o;e&&(o=setTimeout(()=>q.abort(new DOMException("Request aborted due to timeout.","AbortError")),e),q.signal.onabort=()=>clearTimeout(o));let r$1=l.$fetch||globalThis.$fetch;if(!l.$fetch){"string"==typeof d.value&&"/"===d.value[0]&&(!toValue(l.baseURL)||"/"===toValue(l.baseURL)[0])&&(r$1=r());}return r$1(d.value,{signal:q.signal,...C}).finally(()=>{clearTimeout(o);})},D)}function c(e){const a=[toValue(e.method)?.toUpperCase()||"GET",toValue(e.baseURL)];for(const o of [e.params||e.query]){const e=toValue(o);if(!e)continue;const r={};for(const[o,s]of Object.entries(e))r[toValue(o)]=toValue(s);a.push(r);}if(e.body){const n=toValue(e.body);if(n)if(n instanceof ArrayBuffer)a.push(hash(Object.fromEntries([...new Uint8Array(n).entries()].map(([e,t])=>[e,t.toString()]))));else if(n instanceof FormData){const e={};for(const t of n.entries()){const[o,r]=t;e[o]=r instanceof File?r.name:r;}a.push(hash(e));}else if(isPlainObject(n))a.push(hash(reactive(n)));else try{a.push(hash(n));}catch{console.warn("[useFetch] Failed to hash body",n);}else a.push(hash(n));}return a}

export { u };
//# sourceMappingURL=fetch-B1uUfs--.mjs.map
