import{l as e,r as s}from"#entry";const r=s({user:null,isAuthenticated:!1,isLoading:!1,error:null}),o=()=>{const s=e(()=>!!r.value.user);return{user:e(()=>r.value.user),loading:e(()=>r.value.isLoading),pending:e(()=>r.value.isLoading),error:e(()=>r.value.error),isAuthenticated:s,login:async(e,s)=>{console.log("🔐 [CLIENT] Login attempt for email:",e),r.value.isLoading=!0,r.value.error=null;try{console.log("🔐 [CLIENT] Sending login request...");const o=await $fetch("/api/auth/login",{method:"POST",body:{email:e,password:s}});if(console.log("🔐 [CLIENT] Response received:",o),!o.user)throw console.error("❌ [CLIENT] No user in data:",o),new Error("No user in response data");return r.value.user=o.user,console.log("✅ [CLIENT] Login successful for user:",o.user.username),{success:!0,user:o.user}}catch(o){return console.error("❌ [CLIENT] Login failed:",o),console.error("❌ [CLIENT] Error details:",{name:o.name,message:o.message,status:o.status,statusText:o.statusText,data:o.data}),r.value.error=o.data?.message||o.message||"Erreur de connexion",console.log("❌ [CLIENT] Error message:",r.value.error),{success:!1,error:r.value.error}}finally{r.value.isLoading=!1,console.log("🔐 [CLIENT] Login process completed")}},register:async(e,s,o)=>{console.log("👤 [CLIENT] Registration attempt for:",s,"with email:",e),r.value.isLoading=!0,r.value.error=null;try{console.log("👤 [CLIENT] Sending registration request...");const a=await $fetch("/api/auth/register",{method:"POST",body:{email:e,username:s,password:o}});if(!a.user)throw console.error("❌ [CLIENT] No user in data:",a),new Error("No user in response data");return r.value.user=a.user,console.log("✅ [CLIENT] Registration successful for user:",a.user.username),{success:!0,user:a.user}}catch(a){return console.error("❌ [CLIENT] Registration failed:",a),console.error("❌ [CLIENT] Error details:",{name:a.name,message:a.message,status:a.status,statusText:a.statusText,data:a.data}),r.value.error=a.data?.message||a.message||"Erreur d'inscription",console.log("❌ [CLIENT] Final error message:",r.value.error),{success:!1,error:r.value.error}}finally{r.value.isLoading=!1,console.log("👤 [CLIENT] Registration process completed")}},logout:async()=>{r.value.isLoading=!0;try{return await $fetch("/api/auth/logout",{method:"POST"}),r.value.user=null,{success:!0}}catch(e){return r.value.user=null,{success:!1,error:e.data?.message}}finally{r.value.isLoading=!1}},refreshToken:async()=>{try{const e=await $fetch("/api/auth/refresh",{method:"POST"});return r.value.user=e.user,{success:!0,user:e.user}}catch(e){return r.value.user=null,{success:!1,error:e.data?.message}}},checkAuth:async()=>{console.log("🔐 [CLIENT] Checking authentication status..."),r.value.isLoading=!0;try{console.log("🔐 [CLIENT] Sending auth check request...");const e=await $fetch("/api/auth/me");return r.value.user=e.user||null,e.user?(console.log("✅ [CLIENT] Auth check successful, user found:",e.user.username),{success:!0,user:e.user}):(console.log("🔐 [CLIENT] Auth check successful, no authenticated user"),{success:!0,user:null})}catch(e){return console.log("❌ [CLIENT] Auth check failed:",e.data?.message||e.message),r.value.user=null,{success:!1,error:e.data?.message||e.message}}finally{r.value.isLoading=!1,console.log("🔐 [CLIENT] Auth check process completed")}},clearError:()=>{r.value.error=null},clearCookies:()=>{document.cookie="accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;",document.cookie="refreshToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"}}};export{o as u};
