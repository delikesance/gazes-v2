import{r as e,l as a,k as l,G as r}from"#entry";const u=(u,t={})=>{const{debounceMs:n=300,minLength:o=1,immediate:s=!1}=t,i=e(""),v=e(!1),c=e([]),m=e(null),h=e(!1),d=a(()=>h.value&&0===c.value.length);let g=null,b=null;const f=async e=>{const a=e??i.value;if(!a||a.length<o)return c.value=[],h.value=!1,void(m.value=null);b&&b.abort(),b=new AbortController,v.value=!0,m.value=null;try{const e=await u(a);if(b.signal.aborted)return;c.value=e,h.value=!0}catch(l){b.signal.aborted||(m.value=l instanceof Error?l.message:"Search failed",c.value=[])}finally{b.signal.aborted||(v.value=!1)}},y=()=>{i.value="",c.value=[],h.value=!1,m.value=null,v.value=!1,g&&(clearTimeout(g),g=null),b&&(b.abort(),b=null)};return l(i,e=>{var a;e&&e.length>=o?(a=e,g&&clearTimeout(g),g=setTimeout(()=>{f(a)},n)):e||y()},{immediate:s}),r(()=>{y()}),{query:i,search:{loading:v,results:c,error:m,isEmpty:d,hasSearched:h},executeSearch:f,clearSearch:y}};export{u};
